makeCacheMatrix <- function(x = matrix()) {
m <-  NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)){
message("Getting Cached Data")
return(m)
}
data <- x$get()
m <- inverse(data)
x$setinverse(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m <-  NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve(my_matrix)
makeCacheMatrix <- function(x = matrix()) {
m <-  NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)){
message("Getting Cached Data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$getinverse()
